	.equ @, $000
	.equ N,3
	.equ M,2
	.equ @,$000
	.equ STACKTOP, $E00

	; use CBA method for arrays since only have to pass address of the array to be transposed

	lds#	STACKTOP
	ldf#	0

	psh#	matrix	; loading stack in order
	psh#	N
	psh#	M
	psh#	$080
	jsr	transpose
	ads#	4	;destroy stack 
	hlt

matrix:	.word 1 
	.word 2
	.word 3
	.word 4
	.word 5
	.word 6

AT_address:	.blkw M*N, 0

	
; Subroutine Start
	.equ @, $020
	.equ AT, 2
	.equ	N_, 4
	.equ	M_, 3
	.equ A, 5
	
transpose:	bgn#	0	;decode stack information 
	tsf
	ldx#	0

	lda	i
for_i:	
	cma# ! N_ 	
	jeq end_transp
	sta AT_pos

	clr j 
	
	
for_j:	lda j 
	cma ! M_ 
	jeq end_col

	ldx	intial_pos
	lda&	! A
	adx#	1
	stx intial_pos

	ldx AT_pos	; The transpose bit 
	sta&	!AT
	adx#	!N
	stx	AT_pos	
	
	inc j
	jmp for_j

end_col:	jmp for_i

end_transp:	txa		; restoring fp and returning to calling function 
	popf
	rtn

pos_m:	.word 0
pos_n:	.word 0
intial_pos:	.word 0
AT_pos:	.word 0 
i:	.word 1
j:	.word 1